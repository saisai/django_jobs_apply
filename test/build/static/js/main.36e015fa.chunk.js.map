{"version":3,"sources":["logo.svg","redux/cake/cakeReducer.js","redux/cake/cakeTypes.js","redux/iceCream/iceCreamReducer.js","redux/iceCream/iceCreamTypes.js","redux/user/userReducer.js","redux/user/userTypes.js","redux/rootReducer.js","redux/store.js","redux/cake/cakeActions.js","redux/user/userActions.js","components/CakeContainer.js","components/NewCakeContainer.js","components/IceCreamContainer.js","redux/iceCream/iceCreamActions.js","components/ItemContainter.js","components/UserContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","numOfCakes","cakeReducer","state","action","type","payload","initalState","numOfIceCreams","iceCreamReducer","loading","users","error","reducer","rootReducer","combineReducers","cake","cakeRecuer","iceCream","user","userReducer","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","buyCake","number","fetchUsersRequest","connect","dispatch","props","onClick","useState","setNumber","value","onChange","e","target","buyIceCream","ownProps","item","buyItem","userData","fetchUsers","axios","get","then","response","data","fetchUsersSuccess","catch","errorMsg","message","fetchUsersFailure","useEffect","map","name","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.36e015fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { BUY_CAKE } from './cakeTypes'\r\n\r\nconst initialState = {\r\n\t\r\n\tnumOfCakes: 10\r\n}\r\n\r\n\r\nconst cakeReducer = (state = initialState, action) => {\r\n\t\r\n\tswitch(action.type) {\r\n\t\t\r\n\t\tcase BUY_CAKE: return {\r\n\t\t\t... state,\r\n\t\t\tnumOfCakes: state.numOfCakes - action.payload\r\n\t\t\t//numOfCakes: state.numOfCakes - 1\r\n\t\t}\r\n\t\t\r\n\t\tdefault: return state \r\n\t\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default cakeReducer","export const BUY_CAKE = 'BUY_CAKE'\r\n","import { BUY_ICECREAM } from './iceCreamTypes'\r\n\r\n\r\nconst initalState = {\r\n\tnumOfIceCreams: 20\r\n}\r\n\r\nconst iceCreamReducer = (state= initalState, action) => {\r\n\t\r\n\tswitch(action.type)\r\n\t{\r\n\t\tcase BUY_ICECREAM: return {\r\n\t\t\t... state,\r\n\t\t\tnumOfIceCreams: state.numOfIceCreams - 1\r\n\t\t}\r\n\t\t\r\n\t\tdefault: return state \r\n\t}\r\n}\r\n\r\n\r\nexport default iceCreamReducer","export const BUY_ICECREAM = \"BUY_ICECREAM\"","import {\r\n\tFETCH_USERS_FAILURE,\r\n\tFETCH_USERS_SUCCESS,\r\n\tFETCH_USERS_REQEUST,\r\n} from './userTypes'\r\n\r\n\r\nconst initialState = {\r\n\tloading: false,\r\n\tusers: [],\r\n\terror: ''\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\t\r\n\tswitch(action.type) {\r\n\t\t\r\n\t\tcase FETCH_USERS_REQEUST:\r\n\t\t\treturn {\r\n\t\t\t\t... state,\r\n\t\t\t\tloading: true\r\n\t\t\t}\r\n\t\t\t\r\n\t\tcase FETCH_USERS_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\tusers: action.payload,\r\n\t\t\t\terror: ''\r\n\t\t\t}\r\n\t\t\t\r\n\t\tcase FETCH_USERS_FAILURE:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\tusers: [],\r\n\t\t\t\terror: action.payload\r\n\t\t\t}\r\n\t\tdefault: return state\r\n\t\t\t\r\n\t}\r\n}\r\n\r\nexport default reducer","export const FETCH_USERS_REQEUST = 'FETCH_USERS_REQEUST'\r\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS'\r\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE'","import { combineReducers } from 'redux'\r\n\r\nimport cakeRecuer from './cake/cakeReducer'\r\nimport iceCreamReducer from './iceCream/iceCreamReducer'\r\nimport userReducer from './user/userReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n\tcake: cakeRecuer,\r\n\ticeCream: iceCreamReducer,\r\n\tuser: userReducer\r\n})\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\n//import cakeReducer from './cake/cakeReducer'\r\n//const store = createStore(cakeReducer)\r\n//export default store\r\nimport logger from 'redux-logger'\r\nimport rootReducer from './rootReducer'\r\n\r\n\r\n\r\n//const store = createStore(rootReducer)\r\n//const store = createStore(rootReducer, applyMiddleware(logger))\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger,  thunk)))\r\n\r\nexport default store","import { BUY_CAKE } from './cakeTypes'\r\n/*\r\nexport const buyCake = () => {\r\n\treturn {\r\n\t\ttype: BUY_CAKE\r\n\t}\r\n\r\n}\r\n*/\r\n\r\nexport const buyCake = (number = 1) => {\r\n\treturn {\r\n\t\ttype: BUY_CAKE,\r\n\t\tpayload: number\r\n\t}\r\n\r\n}\r\n","import axios from 'axios'\r\n\r\nimport {\r\n\tFETCH_USERS_FAILURE,\r\n\tFETCH_USERS_SUCCESS,\r\n\tFETCH_USERS_REQEUST,\r\n} from './userTypes'\r\n\r\nconst fetchUsersRequest = () => {\r\n\treturn {\r\n\t\ttype: FETCH_USERS_REQEUST\r\n\t}\r\n}\r\n\r\nconst fetchUsersSuccess = users => {\r\n\treturn {\r\n\t\ttype: FETCH_USERS_SUCCESS,\r\n\t\tpayload: users\r\n\t}\r\n}\r\n\r\nconst fetchUsersFailure = error => {\r\n\treturn {\r\n\t\ttype: FETCH_USERS_FAILURE,\r\n\t\tpayload: error\r\n\t}\r\n}\r\n\r\nexport const fetchUsers = () => {\r\n\t\r\n\treturn (dispatch) => {\r\n\t\t\r\n\t\tdispatch(fetchUsersRequest)\t\t\r\n\t\taxios.get('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => {\r\n\t\t\tconst users = response.data\r\n\t\t\tdispatch(fetchUsersSuccess(users))\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconst errorMsg = error.message\r\n\t\t\tdispatch(fetchUsersFailure(errorMsg))\r\n\t\t})\r\n\t}\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { buyCake } from '../redux'\r\n\r\nfunction CakeContainer(props) {\r\n\r\n    return (\r\n\t\t<div>\r\n\t\t\t<h2>Number of cakes { props.numOfCakes}</h2>\r\n\t\t\t<button onClick={props.buyCake}> Buy Cake </button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\r\n\treturn {\r\n\t\tnumOfCakes: state.cake.numOfCakes\r\n\t}\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tbuyCake: () => dispatch(buyCake())\r\n\t}\r\n}\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps)\r\n(CakeContainer)\r\n","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { buyCake } from '../redux'\r\n\r\nfunction NewCakeContainer(props) {\r\n\tconst [number, setNumber] = useState(1)\r\n    return (\r\n\t\t<div>\r\n\t\t\t<h2>Number of cakes { props.numOfCakes}</h2>\r\n\t\t\t<input type=\"text\" value={number} onChange={e => setNumber(e.target.value)} />\r\n\t\t\t<button onClick={() => props.buyCake(number)}> Buy {number} Cake </button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\r\n\treturn {\r\n\t\tnumOfCakes: state.cake.numOfCakes\r\n\t}\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tbuyCake: number => dispatch(buyCake(number))\r\n\t}\r\n}\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps)\r\n(NewCakeContainer)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { buyIceCream } from '../redux'\r\n\r\nfunction IceCreamContainer(props) {\r\n\r\n    return (\r\n\t\t<div>\r\n\t\t\t<h2>Number of iceCream { props.numOfIceCreams}</h2>\r\n\t\t\t<button onClick={props.buyIceCream}> Buy Icream </button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\r\n\treturn {\r\n\t\tnumOfIceCreams: state.iceCream.numOfIceCreams\r\n\t}\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tbuyIceCream: () => dispatch(buyIceCream())\r\n\t}\r\n}\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps)\r\n(IceCreamContainer)\r\n","import { BUY_ICECREAM } from './iceCreamTypes'\r\n\r\n\r\nexport const buyIceCream = () => {\r\n\treturn {\r\n\t\ttype: BUY_ICECREAM\r\n\t}\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { buyCake, buyIceCream } from '../redux'\r\n\r\n\r\nfunction ItemContainer(props) {\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2> Item - { props.item }</h2>\r\n\t\t\t<button onClick={props.buyItem}> Buy Items</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\t\r\n\tconst itemState = ownProps.cake ? state.cake.numOfCakes : state.iceCream.numOfIceCreams\r\n\t\r\n\treturn {\r\n\t\titem: itemState\r\n\t}\r\n\t\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n\tconst dispatchFunction = ownProps.cake \r\n\t? () => dispatch(buyCake())\r\n\t: () => dispatch(buyIceCream())\r\n\t\r\n\treturn {\r\n\t\tbuyItem: dispatchFunction\r\n\t}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemContainer)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchUsers } from '../redux'\r\n\r\n\r\nfunction UserContainer({ userData, fetchUsers }) {\r\n\tuseEffect(() => {\r\n\t\tfetchUsers()\r\n\t}, [])\r\n\t\r\n\treturn userData.loading ? (\r\n\t\t<h2>Loading...</h2>\r\n\t): userData.error ? (\r\n\t\t<h2>{ userData.error }</h2>\r\n\t): (\r\n\t\t<div>\r\n\t\t<h2>User List</h2>\r\n\t\t<div>\r\n\t\t{\r\n\t\t\tuserData &&\r\n\t\t\tuserData.users &&\r\n\t\t\tuserData.users.map(user => <p>{user.name}</p>)\r\n\t\t}\r\n\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\t\t\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tuserData: state.user\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tfetchUsers: () => dispatch(fetchUsers())\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserContainer)","import React from 'react';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CakeContainer from './components/CakeContainer'\nimport NewCakeContainer from './components/NewCakeContainer'\nimport IceCreamContainer from './components/IceCreamContainer'\nimport HooksCakeContainer from './components/HooksCakeContainer'\nimport ItemContainer from './components/ItemContainter'\nimport UserContainer from './components/UserContainer'\n\nfunction App() {\n  return (\n\t<Provider store={store} >\n    <div className=\"App\">\n\t  <UserContainer />\n\t  {/*\n\t  <ItemContainer />\n\t  <ItemContainer cake />\n\t  <HooksCakeContainer />\n      <CakeContainer />\n      <IceCreamContainer />\n      <NewCakeContainer />\n\t  */}\n    </div>\n\t</Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}